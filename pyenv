#!/bin/zsh

RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'

deactivate_env(){
        if [ -n "${_OLD_VIRTUAL_PATH:-}" ]
        then
                PATH="${_OLD_VIRTUAL_PATH:-}" 
                export PATH
                unset _OLD_VIRTUAL_PATH
        fi
        if [ -n "${_OLD_VIRTUAL_PYTHONHOME:-}" ]
        then
                PYTHONHOME="${_OLD_VIRTUAL_PYTHONHOME:-}" 
                export PYTHONHOME
                unset _OLD_VIRTUAL_PYTHONHOME
        fi
        if [ -n "${BASH:-}" -o -n "${ZSH_VERSION:-}" ]
        then
                hash -r 2> /dev/null
        fi
        if [ -n "${_OLD_VIRTUAL_PS1:-}" ]
        then
                PS1="${_OLD_VIRTUAL_PS1:-}" 
                export PS1
                unset _OLD_VIRTUAL_PS1
        fi
        unset VIRTUAL_ENV
        unset VIRTUAL_ENV_PROMPT
        if [ ! "${1:-}" = "nondestructive" ]
        then
                unset -f deactivate_env
        fi
}

switch_env(){
	deactivate_env &> /dev/null

	{
		source "$PWD/.venv/bin/activate" &&
		printf "%b✓ switched to venv in $( basename $PWD ) %b \n" $GREEN $NC
	} || {
		printf "%b✗ could not find venv%b \n" $RED $NC
		return 1
	}
}

create_env(){
	if [ -d "$PWD/.venv" ]; then
		printf "%b✗ venv already exists%b \n" $RED $NC
		return 1
	
	else	
		deactivate_env &> /dev/null

        python -m venv --prompt $( basename $PWD ) ".venv" 
		printf "%b✓ created venv in $( basename $PWD ) %b \n" $GREEN $NC
	fi
}

remove_env(){
	deactivate_env &> /dev/null

	if [ -d "$PWD/.venv" ]; then
		rm -rf "$PWD/.venv"
	else
		printf "%b✗ No active venv%b \n" $RED $NC
		return 1
	fi
}

add_path(){
	if [ -z "$VIRTUAL_ENV" ]; then
		printf "%b✗ No active venv%b \n" $RED $NC
		return 1
	fi

	echo "$HOME/git/$1" > "$VIRTUAL_ENV/lib/$( ls $VIRTUAL_ENV/lib | sed -e 's/.*p/p/g')/site-packages/$1.pth"
}

usage() { printf "%s" "\
Usage: pyenv --options

Manage python virtual envs

Options:
	-c, --create		Create a python venv in the current git repository.

	-s, --switch		Switch venv: deactivate current venv and activate the
				one in the current git repository. -r, --remove		Remove the python venv in the current git repository. -d, --deactivate	Deactivate the active python venv.
	-p, --add-to-path	Add a custom python package in ~/git/ to the PYTHON_PATH.	

	-h, --help		Display the current help message.
"
return 1
}


PARSED_ARGS=$(getopt -o :csrdph --long create,switch,remove,deactivate,add-to-path,help -n 'pyenv' -- "$@")

if (( $? != 0 )) ; then echo "Found invalid options, try 'pyenv -h'." >&2 ; return 1 ; fi
if (( $# == 0 )) ; then usage; fi


eval set -- "$PARSED_ARGS"


while true; do
    case "$1" in
	-c | --create) create_env ;;
	-s | --switch) switch_env ;;
	-r | --remove) remove_env ;;
	-d | --deactivate) deactivate_env ;;
	-p | --add-to-path) add_path "$3" ;;
	-h | --help) usage ;;
	--) shift; break ;;
	*)
	    echo "Invalid option $1"
	    usage
	    ;;
    esac

    shift
done


